//---------------------------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by T4Model template for T4 (https://github.com/linq2db/linq2db).
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------

#pragma warning disable 1572, 1591

using System;
using System.Collections.Generic;
using System.Linq;

using LinqToDB;
using LinqToDB.Configuration;
using LinqToDB.Mapping;

namespace DataModels
{
	/// <summary>
	/// Database       : innokit.07
	/// Data Source    : tcp://localhost:5433
	/// Server Version : 14.2
	/// </summary>
	public partial class Innokit07DB : LinqToDB.Data.DataConnection
	{
		public ITable<Access>              Accesses             { get { return this.GetTable<Access>(); } }
		public ITable<AccessFilter>        AccessFilters        { get { return this.GetTable<AccessFilter>(); } }
		public ITable<AccessRight>         AccessRights         { get { return this.GetTable<AccessRight>(); } }
		public ITable<BaseEntity>          BaseEntities         { get { return this.GetTable<BaseEntity>(); } }
		public ITable<City>                Cities               { get { return this.GetTable<City>(); } }
		public ITable<File>                Files                { get { return this.GetTable<File>(); } }
		public ITable<FileData>            FileData             { get { return this.GetTable<FileData>(); } }
		public ITable<Group>               Groups               { get { return this.GetTable<Group>(); } }
		public ITable<GroupsOfUser>        GroupsOfUsers        { get { return this.GetTable<GroupsOfUser>(); } }
		public ITable<LogRecord>           LogRecords           { get { return this.GetTable<LogRecord>(); } }
		public ITable<Metadata>            Metadatas            { get { return this.GetTable<Metadata>(); } }
		public ITable<Migration>           Migrations           { get { return this.GetTable<Migration>(); } }
		public ITable<Notification>        Notifications        { get { return this.GetTable<Notification>(); } }
		public ITable<NotificationFile>    NotificationFiles    { get { return this.GetTable<NotificationFile>(); } }
		public ITable<NotificationsToUser> NotificationsToUsers { get { return this.GetTable<NotificationsToUser>(); } }
		public ITable<Right>               Rights               { get { return this.GetTable<Right>(); } }
		public ITable<Role>                Roles                { get { return this.GetTable<Role>(); } }
		public ITable<RoleAccess>          RoleAccesses         { get { return this.GetTable<RoleAccess>(); } }
		public ITable<Salary>              Salaries             { get { return this.GetTable<Salary>(); } }
		public ITable<User>                Users                { get { return this.GetTable<User>(); } }
		public ITable<UserRole>            UserRoles            { get { return this.GetTable<UserRole>(); } }
		public ITable<WeatherCity>         WeatherCities        { get { return this.GetTable<WeatherCity>(); } }
		public ITable<WeatherForecast>     WeatherForecasts     { get { return this.GetTable<WeatherForecast>(); } }

		partial void InitMappingSchema()
		{
		}

		public Innokit07DB()
		{
			InitDataContext();
			InitMappingSchema();
		}

		public Innokit07DB(string configuration)
			: base(configuration)
		{
			InitDataContext();
			InitMappingSchema();
		}

		public Innokit07DB(LinqToDbConnectionOptions options)
			: base(options)
		{
			InitDataContext();
			InitMappingSchema();
		}

		public Innokit07DB(LinqToDbConnectionOptions<Innokit07DB> options)
			: base(options)
		{
			InitDataContext();
			InitMappingSchema();
		}

		partial void InitDataContext  ();
		partial void InitMappingSchema();
	}

	[Table(Schema="public", Name="Access")]
	public partial class Access
	{
		[PrimaryKey, Identity] public long   Id           { get; set; } // bigint
		[Column,     Nullable] public string Name         { get; set; } // text
		[Column,     Nullable] public string CategoryName { get; set; } // text

		#region Associations

		/// <summary>
		/// FK_AccessRight_AccessId_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="Access", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<AccessRight> AccessRightAccessIds { get; set; }

		/// <summary>
		/// FK_RoleAccess_AccessId_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="AccessId", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<RoleAccess> RoleAccessAccessIds { get; set; }

		#endregion
	}

	[Table(Schema="public", Name="AccessFilter")]
	public partial class AccessFilter
	{
		[PrimaryKey, Identity   ] public long   Id                       { get; set; } // bigint
		[Column,        Nullable] public string EntityName               { get; set; } // text
		[Column,        Nullable] public string Name                     { get; set; } // text
		[Column,     NotNull    ] public bool   IsActive                 { get; set; } // boolean
		[Column,        Nullable] public string UserParameterSerialized  { get; set; } // text
		[Column,        Nullable] public string GroupParameterSerialized { get; set; } // text
		[Column,        Nullable] public string FilterSerialized         { get; set; } // text
	}

	[Table(Schema="public", Name="AccessRight")]
	public partial class AccessRight
	{
		[PrimaryKey, Identity] public long  Id     { get; set; } // bigint
		[Column,     Nullable] public long? Right  { get; set; } // bigint
		[Column,     Nullable] public long? Access { get; set; } // bigint

		#region Associations

		/// <summary>
		/// FK_AccessRight_AccessId
		/// </summary>
		[Association(ThisKey="Access", OtherKey="Id", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="FK_AccessRight_AccessId", BackReferenceName="AccessRightAccessIds")]
		public Access AccessId { get; set; }

		/// <summary>
		/// FK_AccessRight_RightId
		/// </summary>
		[Association(ThisKey="Right", OtherKey="Id", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="FK_AccessRight_RightId", BackReferenceName="AccessRightRightIds")]
		public Right RightId { get; set; }

		#endregion
	}

	[Table(Schema="public", Name="BaseEntity")]
	public partial class BaseEntity
	{
		[PrimaryKey, Identity] public long      Id             { get; set; } // bigint
		[Column,     Nullable] public DateTime? CreatedWhen    { get; set; } // timestamp (6) without time zone
		[Column,     Nullable] public DateTime? ModifiedWhen   { get; set; } // timestamp (6) without time zone
		[Column,     Nullable] public bool?     IsDeleted      { get; set; } // boolean
		[Column,     Nullable] public long?     CreatedByUser  { get; set; } // bigint
		[Column,     Nullable] public long?     ModifiedByUser { get; set; } // bigint

		#region Associations

		/// <summary>
		/// FK_BaseEntity_CreatedByUserId
		/// </summary>
		[Association(ThisKey="CreatedByUser", OtherKey="Id", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="FK_BaseEntity_CreatedByUserId", BackReferenceName="BaseEntityCreatedByUserIds")]
		public User CreatedByUserId { get; set; }

		/// <summary>
		/// FK_BaseEntity_ModifiedByUserId
		/// </summary>
		[Association(ThisKey="ModifiedByUser", OtherKey="Id", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="FK_BaseEntity_ModifiedByUserId", BackReferenceName="BaseEntityModifiedByUserIds")]
		public User ModifiedByUserId { get; set; }

		/// <summary>
		/// FK_WeatherForecast_BaseEntity_derived_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="Id", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToOne, IsBackReference=true)]
		public WeatherForecast WeatherForecastderived { get; set; }

		#endregion
	}

	[Table(Schema="public", Name="City")]
	public partial class City
	{
		[PrimaryKey, Identity   ] public long     Id           { get; set; } // bigint
		[Column,        Nullable] public string   Name         { get; set; } // text
		[Column,        Nullable] public long?    Population   { get; set; } // bigint
		[Column,        Nullable] public long?    Wf           { get; set; } // bigint
		[Column,     NotNull    ] public TimeSpan TimeSpanTest { get; set; } // interval

		#region Associations

		/// <summary>
		/// FK_WeatherCities_CityId_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="City", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<WeatherCity> WeatherCitiesCityIds { get; set; }

		/// <summary>
		/// FK_City_WfId
		/// </summary>
		[Association(ThisKey="Wf", OtherKey="Id", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="FK_City_WfId", BackReferenceName="CityWfIds")]
		public WeatherForecast WfId { get; set; }

		#endregion
	}

	[Table(Schema="public", Name="File")]
	public partial class File
	{
		[PrimaryKey, Identity   ] public long   Id        { get; set; } // bigint
		[Column,        Nullable] public string FileName  { get; set; } // text
		[Column,        Nullable] public string Extension { get; set; } // text
		[Column,     NotNull    ] public int    Source    { get; set; } // integer

		#region Associations

		/// <summary>
		/// FK_FileData_FileId_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="File", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<FileData> FileDataFileIds { get; set; }

		/// <summary>
		/// FK_NotificationFile_FileId_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="FileId", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<NotificationFile> NotificationFileFileIds { get; set; }

		#endregion
	}

	[Table(Schema="public", Name="FileData")]
	public partial class FileData
	{
		[PrimaryKey, Identity] public long   Id   { get; set; } // bigint
		[Column,     Nullable] public byte[] Data { get; set; } // bytea
		[Column,     Nullable] public long?  File { get; set; } // bigint

		#region Associations

		/// <summary>
		/// FK_FileData_FileId
		/// </summary>
		[Association(ThisKey="File", OtherKey="Id", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="FK_FileData_FileId", BackReferenceName="FileDataFileIds")]
		public File FileId { get; set; }

		#endregion
	}

	[Table(Schema="public", Name="Group")]
	public partial class Group
	{
		[PrimaryKey, Identity] public long      Id             { get; set; } // bigint
		[Column,     Nullable] public string    Name           { get; set; } // text
		[Column,     Nullable] public DateTime? CreatedWhen    { get; set; } // timestamp (6) without time zone
		[Column,     Nullable] public DateTime? ModifiedWhen   { get; set; } // timestamp (6) without time zone
		[Column,     Nullable] public long?     CreatedByUser  { get; set; } // bigint
		[Column,     Nullable] public long?     ModifiedByUser { get; set; } // bigint

		#region Associations

		/// <summary>
		/// FK_Group_CreatedByUserId
		/// </summary>
		[Association(ThisKey="CreatedByUser", OtherKey="Id", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="FK_Group_CreatedByUserId", BackReferenceName="GroupCreatedByUserIds")]
		public User CreatedByUserId { get; set; }

		/// <summary>
		/// FK_GroupsOfUsers_GroupId_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="GroupId", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<GroupsOfUser> GroupsOfUsersGroupIds { get; set; }

		/// <summary>
		/// FK_Group_ModifiedByUserId
		/// </summary>
		[Association(ThisKey="ModifiedByUser", OtherKey="Id", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="FK_Group_ModifiedByUserId", BackReferenceName="GroupModifiedByUserIds")]
		public User ModifiedByUserId { get; set; }

		#endregion
	}

	[Table(Schema="public", Name="GroupsOfUsers")]
	public partial class GroupsOfUser
	{
		[Column("User_Id"),  PrimaryKey(1), NotNull] public long UserId  { get; set; } // bigint
		[Column("Group_Id"), PrimaryKey(2), NotNull] public long GroupId { get; set; } // bigint

		#region Associations

		/// <summary>
		/// FK_GroupsOfUsers_GroupId
		/// </summary>
		[Association(ThisKey="GroupId", OtherKey="Id", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="FK_GroupsOfUsers_GroupId", BackReferenceName="GroupsOfUsersGroupIds")]
		public Group Group { get; set; }

		/// <summary>
		/// FK_GroupsOfUsers_UserId
		/// </summary>
		[Association(ThisKey="UserId", OtherKey="Id", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="FK_GroupsOfUsers_UserId", BackReferenceName="GroupsOfUsersUserIds")]
		public User User { get; set; }

		#endregion
	}

	[Table(Schema="public", Name="LogRecord")]
	public partial class LogRecord
	{
		[PrimaryKey, Identity   ] public long     Id            { get; set; } // bigint
		[Column,     NotNull    ] public int      LogLevel      { get; set; } // integer
		[Column,        Nullable] public string   Message       { get; set; } // text
		[Column,        Nullable] public string   Action        { get; set; } // text
		[Column,        Nullable] public string   Category      { get; set; } // text
		[Column,        Nullable] public string   ArgumentsJson { get; set; } // text
		[Column,        Nullable] public string   Object        { get; set; } // text
		[Column,        Nullable] public string   Login         { get; set; } // text
		[Column,        Nullable] public string   IPAddress     { get; set; } // text
		[Column,        Nullable] public string   Module        { get; set; } // text
		[Column,     NotNull    ] public DateTime Date          { get; set; } // timestamp (6) without time zone
		[Column,        Nullable] public string   EntityName    { get; set; } // text
		[Column,        Nullable] public string   EntityId      { get; set; } // text
	}

	[Table(Schema="public", Name="_metadata")]
	public partial class Metadata
	{
		[PrimaryKey, Identity   ] public long   Id       { get; set; } // bigint
		[Column,        Nullable] public string Data     { get; set; } // text
		[Column,     NotNull    ] public bool   IsActual { get; set; } // boolean
	}

	[Table(Schema="public", Name="migrations")]
	public partial class Migration
	{
		[PrimaryKey, Identity   ] public long     Id      { get; set; } // bigint
		[Column,        Nullable] public string   Name    { get; set; } // text
		[Column,     NotNull    ] public DateTime Applied { get; set; } // timestamp (6) without time zone
	}

	[Table(Schema="public", Name="Notification")]
	public partial class Notification
	{
		[PrimaryKey, Identity] public long      Id             { get; set; } // bigint
		[Column,     Nullable] public string    Title          { get; set; } // text
		[Column,     Nullable] public string    Body           { get; set; } // text
		[Column,     Nullable] public DateTime? CreatedWhen    { get; set; } // timestamp (6) without time zone
		[Column,     Nullable] public DateTime? ModifiedWhen   { get; set; } // timestamp (6) without time zone
		[Column,     Nullable] public long?     CreatedByUser  { get; set; } // bigint
		[Column,     Nullable] public long?     ModifiedByUser { get; set; } // bigint

		#region Associations

		/// <summary>
		/// FK_Notification_CreatedByUserId
		/// </summary>
		[Association(ThisKey="CreatedByUser", OtherKey="Id", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="FK_Notification_CreatedByUserId", BackReferenceName="NotificationCreatedByUserIds")]
		public User CreatedByUserId { get; set; }

		/// <summary>
		/// FK_Notification_ModifiedByUserId
		/// </summary>
		[Association(ThisKey="ModifiedByUser", OtherKey="Id", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="FK_Notification_ModifiedByUserId", BackReferenceName="NotificationModifiedByUserIds")]
		public User ModifiedByUserId { get; set; }

		/// <summary>
		/// FK_NotificationFile_NotificationId_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="NotificationId", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<NotificationFile> NotificationFileNotificationIds { get; set; }

		/// <summary>
		/// FK_NotificationsToUsers_NotificationId_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="Notification", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<NotificationsToUser> NotificationsToUsersNotificationIds { get; set; }

		#endregion
	}

	[Table(Schema="public", Name="NotificationFile")]
	public partial class NotificationFile
	{
		[Column("Notification_Id"), PrimaryKey(1), NotNull] public long NotificationId { get; set; } // bigint
		[Column("File_Id"),         PrimaryKey(2), NotNull] public long FileId         { get; set; } // bigint

		#region Associations

		/// <summary>
		/// FK_NotificationFile_FileId
		/// </summary>
		[Association(ThisKey="FileId", OtherKey="Id", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="FK_NotificationFile_FileId", BackReferenceName="NotificationFileFileIds")]
		public File File { get; set; }

		/// <summary>
		/// FK_NotificationFile_NotificationId
		/// </summary>
		[Association(ThisKey="NotificationId", OtherKey="Id", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="FK_NotificationFile_NotificationId", BackReferenceName="NotificationFileNotificationIds")]
		public Notification Notification { get; set; }

		#endregion
	}

	[Table(Schema="public", Name="NotificationsToUsers")]
	public partial class NotificationsToUser
	{
		[PrimaryKey, Identity] public long      Id           { get; set; } // bigint
		[Column,     Nullable] public DateTime? ViewDateTime { get; set; } // timestamp (6) without time zone
		[Column,     Nullable] public long?     Notification { get; set; } // bigint
		[Column,     Nullable] public long?     User         { get; set; } // bigint

		#region Associations

		/// <summary>
		/// FK_NotificationsToUsers_NotificationId
		/// </summary>
		[Association(ThisKey="Notification", OtherKey="Id", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="FK_NotificationsToUsers_NotificationId", BackReferenceName="NotificationsToUsersNotificationIds")]
		public Notification NotificationId { get; set; }

		/// <summary>
		/// FK_NotificationsToUsers_UserId
		/// </summary>
		[Association(ThisKey="User", OtherKey="Id", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="FK_NotificationsToUsers_UserId", BackReferenceName="NotificationsToUsersUserIds")]
		public User UserId { get; set; }

		#endregion
	}

	[Table(Schema="public", Name="Right")]
	public partial class Right
	{
		[PrimaryKey, Identity] public long   Id        { get; set; } // bigint
		[Column,     Nullable] public string Name      { get; set; } // text
		[Column,     Nullable] public string Operation { get; set; } // text

		#region Associations

		/// <summary>
		/// FK_AccessRight_RightId_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="Right", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<AccessRight> AccessRightRightIds { get; set; }

		#endregion
	}

	[Table(Schema="public", Name="Role")]
	public partial class Role
	{
		[PrimaryKey, Identity] public long   Id          { get; set; } // bigint
		[Column,     Nullable] public string Name        { get; set; } // text
		[Column,     Nullable] public string NsiAccesses { get; set; } // text

		#region Associations

		/// <summary>
		/// FK_RoleAccess_RoleId_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="RoleId", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<RoleAccess> RoleAccessRoleIds { get; set; }

		/// <summary>
		/// FK_UserRoles_RoleId_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="RoleId", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<UserRole> UserRolesRoleIds { get; set; }

		#endregion
	}

	[Table(Schema="public", Name="RoleAccess")]
	public partial class RoleAccess
	{
		[PrimaryKey, Identity] public long   Id       { get; set; } // bigint
		[Column,     Nullable] public string Rights   { get; set; } // text
		[Column,     Nullable] public long?  RoleId   { get; set; } // bigint
		[Column,     Nullable] public long?  AccessId { get; set; } // bigint

		#region Associations

		/// <summary>
		/// FK_RoleAccess_AccessId
		/// </summary>
		[Association(ThisKey="AccessId", OtherKey="Id", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="FK_RoleAccess_AccessId", BackReferenceName="RoleAccessAccessIds")]
		public Access Access { get; set; }

		/// <summary>
		/// FK_RoleAccess_RoleId
		/// </summary>
		[Association(ThisKey="RoleId", OtherKey="Id", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="FK_RoleAccess_RoleId", BackReferenceName="RoleAccessRoleIds")]
		public Role Role { get; set; }

		#endregion
	}

	[Table(Schema="public", Name="Salary")]
	public partial class Salary
	{
		[PrimaryKey, Identity   ] public long      Id         { get; set; } // bigint
		[Column,        Nullable] public string    Name       { get; set; } // text
		[Column,     NotNull    ] public int       Month      { get; set; } // integer
		[Column,     NotNull    ] public int       Year       { get; set; } // integer
		[Column,     NotNull    ] public int       Department { get; set; } // integer
		[Column,     NotNull    ] public long      Amount     { get; set; } // bigint
		[Column,     NotNull    ] public int       SkillLevel { get; set; } // integer
		[Column,        Nullable] public DateTime? ActualFrom { get; set; } // timestamp (6) without time zone
		[Column,        Nullable] public DateTime? ActualTo   { get; set; } // timestamp (6) without time zone
	}

	[Table(Schema="public", Name="User")]
	public partial class User
	{
		[PrimaryKey, Identity   ] public long   Id                   { get; set; } // bigint
		[Column,        Nullable] public string Name                 { get; set; } // text
		[Column,        Nullable] public string DashboardIdToDisplay { get; set; } // text
		[Column,        Nullable] public string Password             { get; set; } // text
		[Column,        Nullable] public string NsiAccesses          { get; set; } // text
		[Column,        Nullable] public string Email                { get; set; } // text
		[Column,        Nullable] public string Login                { get; set; } // text
		[Column,        Nullable] public string IPAddress            { get; set; } // text
		[Column,     NotNull    ] public bool   IsAdmin              { get; set; } // boolean
		[Column,        Nullable] public string AuthToken            { get; set; } // text

		#region Associations

		/// <summary>
		/// FK_BaseEntity_CreatedByUserId_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="CreatedByUser", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<BaseEntity> BaseEntityCreatedByUserIds { get; set; }

		/// <summary>
		/// FK_BaseEntity_ModifiedByUserId_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="ModifiedByUser", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<BaseEntity> BaseEntityModifiedByUserIds { get; set; }

		/// <summary>
		/// FK_Group_CreatedByUserId_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="CreatedByUser", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Group> GroupCreatedByUserIds { get; set; }

		/// <summary>
		/// FK_Group_ModifiedByUserId_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="ModifiedByUser", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Group> GroupModifiedByUserIds { get; set; }

		/// <summary>
		/// FK_GroupsOfUsers_UserId_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="UserId", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<GroupsOfUser> GroupsOfUsersUserIds { get; set; }

		/// <summary>
		/// FK_Notification_CreatedByUserId_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="CreatedByUser", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Notification> NotificationCreatedByUserIds { get; set; }

		/// <summary>
		/// FK_Notification_ModifiedByUserId_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="ModifiedByUser", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Notification> NotificationModifiedByUserIds { get; set; }

		/// <summary>
		/// FK_NotificationsToUsers_UserId_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="User", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<NotificationsToUser> NotificationsToUsersUserIds { get; set; }

		/// <summary>
		/// FK_UserRoles_UserId_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="UserId", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<UserRole> UserRolesUserIds { get; set; }

		#endregion
	}

	[Table(Schema="public", Name="UserRoles")]
	public partial class UserRole
	{
		[Column("User_Id"), PrimaryKey(1), NotNull] public long UserId { get; set; } // bigint
		[Column("Role_Id"), PrimaryKey(2), NotNull] public long RoleId { get; set; } // bigint

		#region Associations

		/// <summary>
		/// FK_UserRoles_RoleId
		/// </summary>
		[Association(ThisKey="RoleId", OtherKey="Id", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="FK_UserRoles_RoleId", BackReferenceName="UserRolesRoleIds")]
		public Role Role { get; set; }

		/// <summary>
		/// FK_UserRoles_UserId
		/// </summary>
		[Association(ThisKey="UserId", OtherKey="Id", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="FK_UserRoles_UserId", BackReferenceName="UserRolesUserIds")]
		public User User { get; set; }

		#endregion
	}

	[Table(Schema="public", Name="WeatherCities")]
	public partial class WeatherCity
	{
		[PrimaryKey, Identity] public long  Id              { get; set; } // bigint
		[Column,     Nullable] public long? WeatherForecast { get; set; } // bigint
		[Column,     Nullable] public long? City            { get; set; } // bigint

		#region Associations

		/// <summary>
		/// FK_WeatherCities_CityId
		/// </summary>
		[Association(ThisKey="City", OtherKey="Id", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="FK_WeatherCities_CityId", BackReferenceName="WeatherCitiesCityIds")]
		public City CityId { get; set; }

		/// <summary>
		/// FK_WeatherCities_WeatherForecastId
		/// </summary>
		[Association(ThisKey="WeatherForecast", OtherKey="Id", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.ManyToOne, KeyName="FK_WeatherCities_WeatherForecastId", BackReferenceName="WeatherCitiesWeatherForecastIds")]
		public WeatherForecast WeatherForecastId { get; set; }

		#endregion
	}

	[Table(Schema="public", Name="WeatherForecast")]
	public partial class WeatherForecast
	{
		[PrimaryKey, NotNull    ] public long     Id           { get; set; } // bigint
		[Column,     NotNull    ] public DateTime Date         { get; set; } // timestamp (6) without time zone
		[Column,     NotNull    ] public int      TEMPERATUREC { get; set; } // integer
		[Column,     NotNull    ] public double   Rating       { get; set; } // double precision
		[Column,     NotNull    ] public int      Summary      { get; set; } // integer
		[Column,     NotNull    ] public bool     IsZaebis     { get; set; } // boolean
		[Column,        Nullable] public string   Commentary   { get; set; } // text

		#region Associations

		/// <summary>
		/// FK_WeatherForecast_BaseEntity_derived
		/// </summary>
		[Association(ThisKey="Id", OtherKey="Id", CanBeNull=false, Relationship=LinqToDB.Mapping.Relationship.OneToOne, KeyName="FK_WeatherForecast_BaseEntity_derived", BackReferenceName="WeatherForecastderived")]
		public BaseEntity BaseEntity { get; set; }

		/// <summary>
		/// FK_City_WfId_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="Wf", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<City> CityWfIds { get; set; }

		/// <summary>
		/// FK_WeatherCities_WeatherForecastId_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="WeatherForecast", CanBeNull=true, Relationship=LinqToDB.Mapping.Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<WeatherCity> WeatherCitiesWeatherForecastIds { get; set; }

		#endregion
	}

	public static partial class TableExtensions
	{
		public static Access Find(this ITable<Access> table, long Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static AccessFilter Find(this ITable<AccessFilter> table, long Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static AccessRight Find(this ITable<AccessRight> table, long Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static BaseEntity Find(this ITable<BaseEntity> table, long Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static City Find(this ITable<City> table, long Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static File Find(this ITable<File> table, long Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static FileData Find(this ITable<FileData> table, long Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static Group Find(this ITable<Group> table, long Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static GroupsOfUser Find(this ITable<GroupsOfUser> table, long UserId, long GroupId)
		{
			return table.FirstOrDefault(t =>
				t.UserId  == UserId &&
				t.GroupId == GroupId);
		}

		public static LogRecord Find(this ITable<LogRecord> table, long Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static Metadata Find(this ITable<Metadata> table, long Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static Migration Find(this ITable<Migration> table, long Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static Notification Find(this ITable<Notification> table, long Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static NotificationFile Find(this ITable<NotificationFile> table, long NotificationId, long FileId)
		{
			return table.FirstOrDefault(t =>
				t.NotificationId == NotificationId &&
				t.FileId         == FileId);
		}

		public static NotificationsToUser Find(this ITable<NotificationsToUser> table, long Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static Right Find(this ITable<Right> table, long Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static Role Find(this ITable<Role> table, long Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static RoleAccess Find(this ITable<RoleAccess> table, long Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static Salary Find(this ITable<Salary> table, long Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static User Find(this ITable<User> table, long Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static UserRole Find(this ITable<UserRole> table, long UserId, long RoleId)
		{
			return table.FirstOrDefault(t =>
				t.UserId == UserId &&
				t.RoleId == RoleId);
		}

		public static WeatherCity Find(this ITable<WeatherCity> table, long Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static WeatherForecast Find(this ITable<WeatherForecast> table, long Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}
	}
}
